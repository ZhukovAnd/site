"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageButton = void 0;
const api_1 = require("../api");
const button_1 = require("./button");
const util_1 = require("util");
const Helpers_1 = require("../../Helpers");
const Password_1 = require("../../Password");
class MessageButton {
    constructor(client, original, chat, bot, msgId) {
        this.button = original;
        this._bot = bot;
        this._chat = chat;
        this._msgId = msgId;
        this._client = client;
    }
    [util_1.inspect.custom]() {
        return Helpers_1.betterConsoleLog(this);
    }
    get client() {
        return this._client;
    }
    get text() {
        return !(this.button instanceof button_1.Button) ? this.button.text : "";
    }
    get data() {
        if (this.button instanceof api_1.Api.KeyboardButtonCallback) {
            return this.button.data;
        }
    }
    get inlineQuery() {
        if (this.button instanceof api_1.Api.KeyboardButtonSwitchInline) {
            return this.button.query;
        }
    }
    get url() {
        if (this.button instanceof api_1.Api.KeyboardButtonUrl) {
            return this.button.url;
        }
    }
    /**
     * Emulates the behaviour of clicking this button.

     If it's a normal `KeyboardButton` with text, a message will be
     sent, and the sent `Message <Message>` returned.

     If it's an inline `KeyboardButtonCallback` with text and data,
     it will be "clicked" and the `BotCallbackAnswer` returned.

     If it's an inline `KeyboardButtonSwitchInline` button, the
     `StartBot` will be invoked and the resulting updates
     returned.

     If it's a `KeyboardButtonUrl`, the URL of the button will
     be returned.

     If it's a `KeyboardButtonRequestPhone`, you must indicate that you
     want to ``sharePhone=True`` in order to share it. Sharing it is not a
     default because it is a privacy concern and could happen accidentally.

     You may also use ``sharePhone=phone`` to share a specific number, in
     which case either `str` or `InputMediaContact` should be used.

     If it's a `KeyboardButtonRequestGeoLocation`, you must pass a
     tuple in ``shareGeo=[longitude, latitude]``. Note that Telegram seems
     to have some heuristics to determine impossible locations, so changing
     this value a lot quickly may not work as expected. You may also pass a
     `InputGeoPoint` if you find the order confusing.
     */
    async click({ sharePhone = false, shareGeo = [0, 0], password, }) {
        if (this.button instanceof api_1.Api.KeyboardButton) {
            return this._client.sendMessage(this._chat, {
                message: this.button.text,
                parseMode: undefined,
            });
        }
        else if (this.button instanceof api_1.Api.KeyboardButtonCallback) {
            let encryptedPassword;
            if (password != undefined) {
                const pwd = await this.client.invoke(new api_1.Api.account.GetPassword());
                encryptedPassword = await Password_1.computeCheck(pwd, password);
            }
            const request = new api_1.Api.messages.GetBotCallbackAnswer({
                peer: this._chat,
                msgId: this._msgId,
                data: this.button.data,
                password: encryptedPassword,
            });
            try {
                return await this._client.invoke(request);
            }
            catch (e) {
                if (e.errorMessage == "BOT_RESPONSE_TIMEOUT") {
                    return null;
                }
                throw e;
            }
        }
        else if (this.button instanceof api_1.Api.KeyboardButtonSwitchInline) {
            return this._client.invoke(new api_1.Api.messages.StartBot({
                bot: this._bot,
                peer: this._chat,
                startParam: this.button.query,
            }));
        }
        else if (this.button instanceof api_1.Api.KeyboardButtonUrl) {
            return this.button.url;
        }
        else if (this.button instanceof api_1.Api.KeyboardButtonGame) {
            const request = new api_1.Api.messages.GetBotCallbackAnswer({
                peer: this._chat,
                msgId: this._msgId,
                game: true,
            });
            try {
                return await this._client.invoke(request);
            }
            catch (e) {
                if (e.errorMessage == "BOT_RESPONSE_TIMEOUT") {
                    return null;
                }
                throw e;
            }
        }
        else if (this.button instanceof api_1.Api.KeyboardButtonRequestPhone) {
            if (!sharePhone) {
                throw new Error("cannot click on phone buttons unless sharePhone=true");
            }
            if (sharePhone == true || typeof sharePhone == "string") {
                const me = (await this._client.getMe());
                sharePhone = new api_1.Api.InputMediaContact({
                    phoneNumber: (sharePhone == true ? me.phone : sharePhone) || "",
                    firstName: me.firstName || "",
                    lastName: me.lastName || "",
                    vcard: "",
                });
            }
            throw new Error("Not supported for now");
            // TODO
            //return this._client.sendFile(this._chat, phoneMedia);
        }
        else if (this.button instanceof api_1.Api.InputWebFileGeoPointLocation) {
            if (!shareGeo) {
                throw new Error("cannot click on geo buttons unless shareGeo=[longitude, latitude]");
            }
            throw new Error("Not supported for now");
            // TODO
            //return this._client.sendFile(this._chat, geoMedia);
        }
    }
}
exports.MessageButton = MessageButton;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZUJ1dHRvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2dyYW1qcy90bC9jdXN0b20vbWVzc2FnZUJ1dHRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxnQ0FBNkI7QUFDN0IscUNBQWtDO0FBQ2xDLCtCQUErQjtBQUMvQiwyQ0FBaUQ7QUFDakQsNkNBQThDO0FBRTlDLE1BQWEsYUFBYTtJQVd0QixZQUNJLE1BQXNCLEVBQ3RCLFFBQW9CLEVBQ3BCLElBQWdCLEVBQ2hCLEdBQTJCLEVBQzNCLEtBQW9CO1FBRXBCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQzFCLENBQUM7SUFoQkQsQ0FBQyxjQUFPLENBQUMsTUFBTSxDQUFDO1FBQ1osT0FBTywwQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBZ0JELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sWUFBWSxlQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNwRSxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osSUFBSSxJQUFJLENBQUMsTUFBTSxZQUFZLFNBQUcsQ0FBQyxzQkFBc0IsRUFBRTtZQUNuRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLElBQUks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